<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ResultMapper">
	<!-- id는 마음대로 작성 prarameter는 실제DTO클래스 -->

	<!-- 총괄 결과 리스트 보기 -->
	<select id="ResultGridList" parameterType="RecordDTO"
		resultType="RecordDTO">
		<!-- SELECT * FROM RECORD_TB WHERE EXTRACT(YEAR FROM RECORD_DATE) = '${YEAR}' 
			ORDER BY RECORD_NUM -->

		SELECT MAX(INDICATORS_NUM) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE)
		as INDICATORS_NUM,
		MAX(INDICATORS_NAME) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE) as INDICATORS_NAME,
		NVL(MAX(TARGET_VAL) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE),'-') as TARGET_VAL,
		NVL(MAX(PRESENT_VAL) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE),'-') as PRESENT_VAL,
		NVL(MAX(GRADE) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE),'-') as GRADE,
		MAX(ACHIEVE_VAL) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE) as ACHIEVE_VAL
		FROM RECORD_TB rt
		WHERE to_char(ADD_MONTHS(RECORD_DATE,-2), 'yyyy') = #{TARGET_VAL}
		<choose>
               <when test="ACTION_CODE == 1"> <!-- 1분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 1 AND 3
               </when> 
               <when test="ACTION_CODE == 2"> <!-- 2분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 4 AND 6
               </when>
               <when test="ACTION_CODE == 3"> <!-- 3분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 7 AND 9
               </when>
               <when test="ACTION_CODE == 4"> <!-- 4분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 10 AND 12
               </when>
               <otherwise>
               		<!-- 분기로 나누지 않음 -->
               </otherwise>
            </choose> 
        AND rt.INDICATORS_NUM in(SELECT MAX(it.INDICATORS_NUM) KEEP (DENSE_RANK LAST ORDER BY it.RECORD_DATE) FROM INDICATORS_TB it GROUP BY it.INDICATORS_NUM HAVING SUM(IS_USE) = 0)
		GROUP BY INDICATORS_NUM, INDICATORS_NAME
	</select>
	
	<!-- 원하는 년도의 최신 지표값들 가져오기 ( 없는 지표는 NULL 로 표시됨 ) -->
	<select id="ResultYearList" parameterType="String" resultType="RecordDTO">
		
		SELECT  MAX(t1.INDICATORS_NUM) KEEP (DENSE_RANK LAST  ORDER BY t2.RECORD_DATE) as INDICATORS_NUM,  
        MAX(t1.INDICATORS_NAME) KEEP (DENSE_RANK LAST  ORDER BY t2.RECORD_DATE) as INDICATORS_NAME, 
        NVL(MAX(t2.TARGET_VAL) KEEP (DENSE_RANK LAST  ORDER BY t2.RECORD_DATE),'-') as TARGET_VAL, 
        NVL(MAX(t2.PRESENT_VAL) KEEP (DENSE_RANK LAST  ORDER BY t2.RECORD_DATE),'-') as PRESENT_VAL, 
        NVL(MAX(t2.GRADE) KEEP (DENSE_RANK LAST  ORDER BY t2.RECORD_DATE), '-') as GRADE, 
        MAX(t2.ACHIEVE_VAL) KEEP (DENSE_RANK LAST  ORDER BY t2.RECORD_DATE) as ACHIEVE_VAL
		FROM INDICATORS_TB t1 LEFT OUTER JOIN RECORD_TB t2 ON t1.INDICATORS_NUM = t2.INDICATORS_NUM AND to_char(t2.RECORD_DATE, 'yyyy') = '${YEAR}'
		GROUP BY t1.INDICATORS_NUM, t1.INDICATORS_NAME
		ORDER BY  t1.INDICATORS_NUM
			
	</select>
	
	
	<!-- 년도별 평가 등급 갯수 각각 가져오기 -->
	<select id="ResultYearGrade" parameterType="String" resultType="GradeCountDTO">
		SELECT  NVL(MAX(GRADE) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE),'기타') as GRADE, NVL(count(*),0) as GC
		FROM RECORD_TB
		WHERE to_char(RECORD_DATE, 'yyyy') = '${YEAR}' AND (INDICATORS_NUM, RECORD_DATE) in (select indicators_num,MAX(record_date) from RECORD_TB  where to_char(RECORD_DATE, 'yyyy') = '${YEAR}'  GROUP BY indicators_num)
		GROUP BY GRADE
	</select>
	
	<!--년도별 평가 등급 퍼센트 사용시 이용  -->
	<select id="BusinessGradePer" parameterType="String" resultType="GradeCountDTO">
		SELECT  NVL(MAX(GRADE) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE),'etc') as GRADE,decode(grade,'A',count(*),0) as A, decode(grade,'B',count(*),0) as B, decode(grade,'D',count(*),0) as D, decode(grade,'',count(*),0) as ETC
		FROM RECORD_TB
		WHERE to_char(RECORD_DATE, 'yyyy') = '${YEAR}' AND (INDICATORS_NUM, RECORD_DATE) in (select indicators_num,MAX(record_date) from RECORD_TB  where to_char(RECORD_DATE, 'yyyy') = '${YEAR}' GROUP BY indicators_num)
		GROUP BY GRADE
        ORDER BY GRADE
	</select>
	
	<!-- 사업별 등급 갯수 가져오기 -->
	<select id="ResultBusinessGrade" parameterType="String" resultType="RecordDTO">
		SELECT  NVL(MAX(GRADE) KEEP (DENSE_RANK LAST ORDER BY RECORD_DATE),'etc') as GRADE,
        NVL(count(decode(is_best,1,1)) ,0) as IS_BEST,
		NVL(count(decode(is_agency,1,1)), 0) as IS_AGENCY, 
		NVL(count(decode(is_aha,1,1)), 0) as IS_AHA, 
		NVL(count(decode(is_linc,1,1)), 0) as IS_LINC, 
		NVL(count(decode(is_type3,1,1)), 0) as IS_TYPE3
		FROM RECORD_TB
		WHERE to_char(RECORD_DATE, 'yyyy') = '${YEAR}' AND (INDICATORS_NUM, RECORD_DATE) in (select indicators_num,MAX(record_date) from RECORD_TB  where to_char(RECORD_DATE, 'yyyy') = '${YEAR}' GROUP BY indicators_num)
		GROUP BY GRADE
        ORDER BY GRADE
	</select>
	
	
	
	<!-- 특정 지표의 년도별 최신보고서들 가져오기 (정의서 내용에 사용)-->
	<select id="ResultListIncd" parameterType="int" resultType="RecordDTO">
		SELECT *
		FROM
		RECORD_TB
		where (INDICATORS_NUM, RECORD_DATE, to_char(ADD_MONTHS(RECORD_DATE,-2), 'yyyy')) in (
    		select INDICATORS_NUM, max(RECORD_DATE),to_char(ADD_MONTHS(RECORD_DATE,-2), 'yyyy') from RECORD_TB group by INDICATORS_NUM,to_char(ADD_MONTHS(RECORD_DATE,-2), 'yyyy')
		) AND INDICATORS_NUM = #{INDICATORS_NUM}
		ORDER BY to_char(ADD_MONTHS(RECORD_DATE,-2), 'yyyy') DESC
	</select>
	
	<!-- 해당 등급 최신보고서들 가져오기 -->
	<select id="ResultListGrade" parameterType="String" resultType="RecordDTO">
		SELECT *
		FROM
		RECORD_TB
		where (INDICATORS_NUM, RECORD_DATE, to_char(RECORD_DATE, 'yyyy')) in (
    		select INDICATORS_NUM, max(RECORD_DATE),to_char(RECORD_DATE, 'yyyy') from RECORD_TB
    		WHERE to_char(RECORD_DATE, 'yyyy') = to_char(sysdate, 'yyyy')
    		group by INDICATORS_NUM,to_char(RECORD_DATE, 'yyyy')
		) AND GRADE = #{GRADE}
		ORDER BY INDICATORS_NUM, to_char(RECORD_DATE, 'yyyy') DESC
	</select>
	
	<!-- 사업별 리스트 가져오기  -->
	<select id="ResultListBussiness" parameterType="String" resultType="IndicatorsDTO">
		SELECT *
		FROM
		INDICATORS_TB
		where (INDICATORS_NUM, RECORD_DATE, to_char(RECORD_DATE, 'yyyy')) in (
    		select INDICATORS_NUM, max(RECORD_DATE),to_char(RECORD_DATE, 'yyyy') from INDICATORS_TB
    		WHERE to_char(RECORD_DATE, 'yyyy') = to_char(sysdate, 'yyyy')
    		group by INDICATORS_NUM,to_char(RECORD_DATE, 'yyyy')
		) AND ${BUSINESS} = 1
		ORDER BY INDICATORS_NUM, to_char(RECORD_DATE, 'yyyy') DESC
	</select>
	
	<!-- 등급별 평가 기준 리스트 가져오기 -->
	<select id="ResultGradeStandard" resultType="GradeDTO">
		SELECT *
		FROM GRADE_TB
		WHERE RECORD_DATE = (SELECT MAX(RECORD_DATE) FROM GRADE_TB)
	</select>
	
	<!-- 년도별 지표 현황 //#{TARGET_VAL}을 년도로 사용 , #{ACTION_CODE}을 분기로 사용 -->
	<select id="StatusList" parameterType="RecordDTO" resultType="RecordDTO">
		SELECT INDICATORS_NUM,INDICATORS_NAME,IS_BEST,IS_AGENCY,IS_AHA,IS_LINC,IS_TYPE3,
			NVL(
			(
			SELECT  MAX(TARGET_VAL) KEEP (DENSE_RANK LAST ORDER BY rtb.RECORD_NUM)
			FROM RECORD_TB rtb
			WHERE rtb.INDICATORS_NUM = itb.INDICATORS_NUM
			AND to_char(RECORD_DATE, 'yyyy') = #{TARGET_VAL}
			<choose>
               <when test="ACTION_CODE == 1"> <!-- 1분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 1 AND 3
               </when> 
               <when test="ACTION_CODE == 2"> <!-- 2분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 4 AND 6
               </when>
               <when test="ACTION_CODE == 3"> <!-- 3분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 7 AND 9
               </when>
               <when test="ACTION_CODE == 4"> <!-- 4분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 10 AND 12
               </when>
               <otherwise>
               		<!-- 분기로 나누지 않음 -->
               </otherwise>
            </choose> 
			),0) TARGET_VAL,
			NVL(
			(
			SELECT MAX(PRESENT_VAL) KEEP (DENSE_RANK LAST ORDER BY rtb.RECORD_NUM)
			FROM RECORD_TB rtb
			WHERE rtb.INDICATORS_NUM = itb.INDICATORS_NUM
			AND to_char(RECORD_DATE, 'yyyy') = #{TARGET_VAL}
			<choose>
               <when test="ACTION_CODE == 1"> <!-- 1분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 1 AND 3
               </when> 
               <when test="ACTION_CODE == 2"> <!-- 2분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 4 AND 6
               </when>
               <when test="ACTION_CODE == 3"> <!-- 3분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 7 AND 9
               </when>
               <when test="ACTION_CODE == 4"> <!-- 4분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 10 AND 12
               </when>
               <otherwise>
               		<!-- 분기로 나누지 않음 -->
               </otherwise>
            </choose> 
			),0) PRESENT_VAL,
			NVL(
			(
			SELECT MAX(ACHIEVE_VAL) KEEP (DENSE_RANK LAST ORDER BY rtb.RECORD_NUM)
			FROM RECORD_TB rtb
			WHERE rtb.INDICATORS_NUM = itb.INDICATORS_NUM
			AND to_char(RECORD_DATE, 'yyyy') = #{TARGET_VAL}
			<choose>
               <when test="ACTION_CODE == 1"> <!-- 1분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 1 AND 3
               </when> 
               <when test="ACTION_CODE == 2"> <!-- 2분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 4 AND 6
               </when>
               <when test="ACTION_CODE == 3"> <!-- 3분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 7 AND 9
               </when>
               <when test="ACTION_CODE == 4"> <!-- 4분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 10 AND 12
               </when>
               <otherwise>
               		<!-- 분기로 나누지 않음 -->
               </otherwise>
            </choose> 
			),0) ACHIEVE_VAL,
			NVL(
			(
			SELECT MAX(GRADE) KEEP (DENSE_RANK LAST ORDER BY rtb.RECORD_NUM)
			FROM RECORD_TB rtb
			WHERE rtb.INDICATORS_NUM = itb.INDICATORS_NUM
			AND to_char(RECORD_DATE, 'yyyy') = #{TARGET_VAL}
			<choose>
               <when test="ACTION_CODE == 1"> <!-- 1분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 1 AND 3
               </when> 
               <when test="ACTION_CODE == 2"> <!-- 2분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 4 AND 6
               </when>
               <when test="ACTION_CODE == 3"> <!-- 3분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 7 AND 9
               </when>
               <when test="ACTION_CODE == 4"> <!-- 4분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 10 AND 12
               </when>
               <otherwise>
               		<!-- 분기로 나누지 않음 -->
               </otherwise>
            </choose> 
			),0) GRADE,
            (SELECT MAX(rtb.RECORD_DATE) KEEP (DENSE_RANK LAST ORDER BY rtb.RECORD_NUM)
			FROM RECORD_TB rtb
			WHERE rtb.INDICATORS_NUM = itb.INDICATORS_NUM
			AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'yyyy') = #{TARGET_VAL}
			<choose>
               <when test="ACTION_CODE == 1"> <!-- 1분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 1 AND 3
               </when> 
               <when test="ACTION_CODE == 2"> <!-- 2분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 4 AND 6
               </when>
               <when test="ACTION_CODE == 3"> <!-- 3분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 7 AND 9
               </when>
               <when test="ACTION_CODE == 4"> <!-- 4분기 -->
                    AND to_char(ADD_MONTHS(RECORD_DATE,-2), 'mm') BETWEEN 10 AND 12
               </when>
               <otherwise>
               		<!-- 분기로 나누지 않음 -->
               </otherwise>
            </choose>
            
			) RECORD_DATE
		FROM
		INDICATORS_TB itb
		where (INDICATORS_NUM, RECORD_DATE, to_char(RECORD_DATE, 'yyyy')) in (
    		select INDICATORS_NUM, max(RECORD_DATE),to_char(RECORD_DATE, 'yyyy') from INDICATORS_TB
    		group by INDICATORS_NUM,to_char(RECORD_DATE, 'yyyy')
		)
		AND IS_USE = 0
		ORDER BY INDICATORS_NUM, to_char(RECORD_DATE, 'yyyy') DESC
	</select>
</mapper>